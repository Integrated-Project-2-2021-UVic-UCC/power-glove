import serial
import time
import struct
import random
#import os

SCAPECHAR = b'\xAA'
STARTCHAR = b'\x11'
ENDCHAR = b'\x22'

INICI = b"\x98"
FINAL = b"\x89"


                        #//////////////////////////////////////////////////// VARIABLES ///////////////////////////////////////////////////////////


#lectura = False
mode_lectura_valors = False  # True al inici de mostrejament de dades
paraules = False # False al acabar-se la calibració del mpu.
F_scan = None  #Periode mostreig absoults del RPY

                        #Valors absoults del RPY
R_absoluta=None
P_absoluta=None
Y_absoluta=None
absolut = None


sumatori = 0 #sumatori coincidencies del diccionari
coincidencia = 0 #coincidencia en la rotació de la funció IMU.

inici_post_absolut = False
canvi = [0,0,0]
canvi_keys = ["Pitch","Roll","Yaw"]
lectura=0
calc = 0   # Fa els calculs del mpu quan és necessari


dada_anterior = []
dada_actual = []
valors_mpu = []


#dicc_tot = {"Prova" : [0,0,3,0,0,0,0,0],'A': [1, 3, 3, 3, 2, 0, 0, 0], 'B': [1, 0, 0, 0, 0, 0, 0, 0], 'C': [1, 1, 1, 1, 1, 0, 0, 0], 'D': [1, 0, 1, 1, 0, 0, 0, 0], 'E': [0, 3, 3, 3, 2, 0, 0, 0], 'F': [1, 1, 0, 0, 0, 0, 0, 0], 'G': [0, 0, 3, 3, 2, 0, 0, 0], 'I': [0, 3, 3, 3, 0, 0, 0, 0], 'K': [1, 0, 2, 3, 2, 0, 0, 0], 'L ': [0, 0, 3, 3, 2, 0, 0, 0], 'M': [1, 1, 1, 1, 0, 0, 0, 0], 'N': [2, 0, 0, 3, 2, 0, 0, 0], 'O': [1, 2, 1, 0, 0, 0, 0, 0], 'P': [1, 0, 0, 0, 2, 0, 0, 0], 'Q': [1, 1, 1, 1, 0, 0, 0, 0], 'R': [1, 0, 1, 2, 1, 0, 0, 0], 'S': [0, 3, 0, 0, 0, 0, 0, 0], 'T': [1, 1, 0, 0, 0, 0, 0, 0], 'U': [2, 0, 0, 3, 2, 0, 0, 0], '1': [1, 0, 3, 3, 2, 0, 0, 0], '2': [2, 0, 0, 3, 2, 0, 0, 0], '3': [1, 0, 0, 0, 1, 0, 0, 0], '4': [1, 0, 0, 0, 0, 0, 0, 0], '5': [0, 0, 0, 0, 0, 0, 0, 0], 'JO': [1, 0, 3, 3, 2, 0, 0, 0], 'TU': [1, 0, 3, 3, 2, 0, 0, 0], 'ELL/A': [0, 3, 3, 3, 2, 0, 0, 0]}
dicc_tot = {'A': [1, 3, 3, 3, 2, 160, 85, 170], 'B': [1, 0, 0, 0, 0, 140, 71, 151], 'C': [1, 1, 1, 1, 0, 999, 999, 999], 'D': [1, 0, 1, 1, 0, 999, 999, 999], 'E': [0, 3, 3, 3, 2, 999, 999, 999], 'F': [1, 1, 0, 0, 0, 999, 999, 999], 'G': [0, 0, 3, 3, 2, 130, 80, 115], 'I': [0, 3, 3, 3, 0, 999, 999, 999], 'K': [1, 0, 2, 3, 2, 999, 999, 999], 'L ': [0, 0, 3, 3, 2, 125, 5, 92], 'M': [1, 1, 1, 1, 0, 205, 8, 169], 'N': [2, 0, 0, 3, 2, 260, 12, 248], 'O': [1, 2, 1, 0, 0, 999, 999, 999], 'P': [1, 0, 0, 0, 2, 165, 7, 135], 'Q': [1, 1, 1, 1, 0, 23, 0, 4], 'U': [2, 0, 0, 3, 2, 999, 999, 999], 'R': [1, 0, 1, 2, 1, 999, 999, 999], 'S': [0, 3, 0, 0, 0, 999, 999, 999], 'T': [1, 1, 0, 0, 0, 999, 999, 999], '1': [1, 0, 3, 3, 2, 90, 7, 97], '2': [2, 0, 0, 3, 2, 125, 5, 94], '3': [1, 0, 0, 0, 1, 120, 8, 84], '4': [1, 0, 0, 0, 0, 90, 13, 98], '5': [0, 0, 0, 0, 0, 125, 11, 95], 'JO': [1, 0, 3, 3, 2, 128, 8, 172], 'TU': [1, 0, 3, 3, 2, 20, 0, 190], 'ELL/A': [0, 3, 3, 3, 2, 999, 999, 999], 'ORELLES': [1, 0, 3, 3, 2, 67, 0, 100], 'PEU': [1, 0, 3, 3, 2, 100, 10, 140], 'LLEIG': [1, 0, 0, 0, 0, 70, 2, 94], 'FRED': [1, 3, 3, 3, 2, 92, 3, 92]}


                #VARIABLES DE PROVA
anterior = [-150,140,90]
actual = [+140,50,-90]




                        #//////////////////////////////////////////////////// FUNCIONS ///////////////////////////////////////////////////////////




def read_trama(ser):
        buff = b''
        # Esperar sequencia start.
        while True:
                byte = ser.read(1)
                if byte==SCAPECHAR:
                        byte2 = ser.read(1)
                        if byte2==STARTCHAR:
                                buff = b''
                        elif byte2==ENDCHAR:
                                return buff
                        else:
                                buff = buff + byte2
                else:
                        buff = buff + byte
def read_char (obj) :
        buff = b""
        while True:
                dada = obj.read(1)
                if dada == INICI :
                        buff = b""
                elif dada == FINAL :
                        return buff
                else :
                        buff = buff + dada
def mapejar (valor,vinf,vsup,minim,maxim) :
        rangvalors = vsup-vinf                  #Definim el rang del sensor
        rangmap = maxim-minim+1                 #Definim el rang de treball
        calcul = rangvalors / rangmap           #Factor divisor
        mapa = (valor-vinf)/calcul              #Mapeig del valor
                                                #Filtratge mapeig
        if mapa>maxim : return maxim
        elif mapa<minim :  return minim
        else : return int(mapa)



def IMU2 (llista_claus,actual,anterior) :
        global absolut
        global coincidencia
        global dicc_tot
        global calc
        print(absolut)
        for i in range (0,len(llista_claus)) :  # for per les coincidencies trobades
                clau_coincidencia = llista_claus[i]
                print(clau_coincidencia)
                rot = dicc_tot[clau_coincidencia][5:]
                if rot == [999,999,999] :  # If de seguretat per si alguna configuració trobada és incorrecte i té un 99,99,99
                                           # indicant que és un signe amb orientació unica
                        return
                print(clau_coincidencia,"-->",rot)
                for k in range (0,3) :        # estudi R P Y de cada coincidencia
                        act = actual[k]
                        ant = anterior[k]
                        dada_guardada = rot[k]
                        print("actual : ",act,"anterior : ",ant,"Absolut : ",absolut[k],"dada_guardada : ",dada_guardada)
                        valor_superior = dada_guardada+10
                        valor_inferior = dada_guardada-10
                        print("valors_superior : ",valor_superior,"valor_inferior : ",valor_inferior)
                        if canvi[k] == 0 :
                                print("Calcul sense passar per limit",)
                                calc = act-absolut[k]
                                print("-----------   CALCUL  ------------- : ",calc)
                        elif canvi[k] == 1 :                               #HORARI
                                if act<=0 :
                                        #print("Map: +-")
                                        print("Calcul horari")
                                        calc = act-absolut[k]+360
                                        print("-----------   CALCUL  ------------- : ",calc)
                                else :
                                        print("Error map en canvi = 1")
                        elif canvi[k] == 2 :                               #ANTIHORARI
                                if act>=0 :
                                        #print("Map: -+")
                                        print("Calcul antihorari")
                                        calc = act-absolut[k]-360
                                        print("-----------   CALCUL  ------------- : ",calc)
                                else :
                                        print("Error map en canvi = 2")
                        if valor_inferior<= calc <= valor_superior   :
                                coincidencia+=1 #S'ha trobat coincidencia
                                print("Valor_dicc : ",dada_guardada,"Calcul ",calc)
                        
                        calcul=0
                coincidencia=0
                if coincidencia>=2 :
                        print("Valor trobat")#hem acabat
                        print("La configuració trobada és : ",clau_coincidencia)


def IMU (llista) :
        global absolut
        global calc
        calculs = []
        print("Actual  : ","[  P ,  R  ,  Y  ]","\n")
        print("Absolut : ",absolut)
        for k in range (0,3) :
                act = llista[k]
                if canvi[k] == 0 :
                        #print("Calcul sense passar per limit")
                        calc = act-absolut[k]
                        #print("-----------   CALCUL  ------------- : ",calc)
                elif canvi[k] == 1 :                               #HORARI
                        if act<=0 :                                                             #print("Map: +-")
                                #print("Calcul horari")
                                calc = act-absolut[k]+360
                                #print("-----------   CALCUL  ------------- : ",calc)
                        else :
                                pass
                                #print("Error map en canvi = 1")
                elif canvi[k] == 2 :                               #ANTIHORARI
                        if act>=0 :                                                     #print("Map: -+")
                                #print("Calcul antihorari")
                                calc = act-absolut[k]-360
                                #print("-----------   CALCUL  ------------- : ",calc)
                        else :
                                pass
                                #print("Error map en canvi = 2")
                calculs.append(calc)

        print("Actual  : ",llista,"\n")
        print("                  Calculs : ",calculs)
        print("\n")
        print("        Canvi :          ",canvi)
        print("\n")
        



                        


#canvi = 1 --> hem passat pel punt crític en sentit horari
#canvi = 2 --> hem passat pel punt crític en sentit antihorari

def change (actual,anterior) :
        global canvi
        if anterior == [] :
                return
        for i in range (0,len(actual)) :
                m = anterior[i]-actual[i]
                m = abs(m)
                if m>300 :
                        if actual[i]<0 :
                                print(anterior,"--->",actual,"\n")
                                if canvi[i] != 0 :
                                        canvi[i] = 0
                                        print("CANVI DETECTAT!!!! -   VALOR ACTUAL ",canvi_keys[i]," = 0")
                                        print("TORNEM ENRERA!!!!")
                                else:
                                        canvi[i] = 1
                                        print("CANVI DETECTAT!!!! -   VALOR ACTUAL ",canvi_keys[i]," = 1")
                        else :                #elif actual[i]>0 :
                                print(anterior,"--->",actual,"\n")
                                if canvi[i] != 0:
                                        canvi[i] = 0
                                        print("CANVI DETECTAT!!!! -   VALOR ACTUAL ",canvi_keys[i]," = 0")
                                        print("TORNEM ENRERA!!!!")
                                else :
                                        canvi[i] = 2
                                        print("CANVI DETECTAT!!!! -   VALOR ACTUAL ",canvi_keys[i]," = 2")
        #return canvi
        
        

def lectura_flex(dicc,valors) :
        global sumatori
        valors_trobats = []
        for possibilitats in dicc :
                pos = dicc[possibilitats][:5]
                if pos == valors :
                        sumatori+=1
                        valors_trobats.append(possibilitats)
        #print(sumatori)
        return valors_trobats


                #//////////////////////////////////////////////////// MAIN  ///////////////////////////////////////////////////////////
print("Inici codi")
arduino = serial.Serial("COM6", 115200, timeout=.1)
paraules = True

print("////////////////////////        INICIALITZACIÓ        /////////////////////////////")
print("MANTENIR EL GUA EN UNA SUPERFÍCIE PLANA SENSE REALITZAR CAP GEST NI MOVIMENT")

                                #CONDICIONS INCIALS
paraules = False                                         #paraules = False
#valors = True
F_scan = 1
mode_lectura_valors = True                              #mode_lectura_valors = True

while True:
        if paraules :
                print("Paraules")
                missatge = read_char(arduino)
                if missatge == b'Inici_programa' :
                        print("Correcte")
                        mode_lectura_valors = True
                        paraules = False
        if mode_lectura_valors :
                trama = read_trama(arduino)
                if (len(trama) == 32)  :
                        dada_anterior = valors_mpu
                        data = struct.unpack("<ffffffff",trama)
                        data_map = [mapejar(data[0],2900,3400,0,2),mapejar(data[1],3400,4050,0,3),mapejar(data[2],3100,3800,0,3),mapejar(data[3],3000,3800,0,3),mapejar(data[4],2630,3530,0,2),data[5],data[6],data[7]]
                        if F_scan<25 :                                          # 1 vegada en cada loop.
                                P_absoluta = data[5]
                                R_absoluta = data[6]
                                Y_absoluta = data[7]
                                F_scan+=1
                        elif F_scan == 25 :
                                absolut = [P_absoluta,R_absoluta,Y_absoluta]
                                F_scan+=1
                        else:
                                valors_flex = data_map[:5]                              #En cada lectura
                                valors_mpu = data_map[5:8]                              #En cada lectura
                                dada_actual = valors_mpu                                #En cada lectura (sintaxis)
                                change(dada_actual,dada_anterior)                       #En cada lectura
                                #print(papa)
                                if lectura==4 :   
                                #1 de cada 4  
                                        #--*--
                                        #os.system("cls")
                                        IMU(valors_mpu)
                                        
                                        """
                                        llista_configuracions = lectura_flex(dicc_tot,valors_flex)      
                                        if sumatori == 1 :
                                                print("Configuració trobada : ",llista_configuracions[0])
                                        elif sumatori > 1 :
                                                print("Varies configuracions")
                                                IMU2(llista_configuracions,dada_actual,dada_anterior)
                                        elif sumatori == 0 :
                                                print("No s'han trobat configuracions")
                                        sumatori=0
                                                #--*--
                                        """
                                        #Printeig de valors
                                        """
                                        print("Canvi : ",canvi)
                                        print("Absoluts, valors-actual :  ",absolut,"    ",dada_actual)

                                        print("Valors : ")
                                        print ("Flex : ",valors_flex,"Mpu : ",valors_mpu,"\n")
                                        #print("Change : ")
                                        #print(dada_actual,"--->",dada_anterior,"\n")
                                        """
                                        lectura=0
                                lectura+=1
                                #print(dada_actual,absolut)
                        

